//
//  SignInWithApple.swift
//  SAuthNIOLib
//
//  Created by Kyle Jessup on 2020-03-11.
//

import Foundation
import PerfectCURL

struct SignInWithAppleInfo: Codable {
	
}

fileprivate struct TokenResponse: Codable {
	// (Reserved for future use) A token used to access allowed data. Currently, no data set has been defined for access.
	let access_token: String?
	// The amount of time, in seconds, before the access token expires.
	let expires_in: Int
	// A JSON Web Token that contains the user’s identity information.
	let id_token: String
	// The refresh token used to regenerate new access tokens. Store this token securely on your server.
	let refresh_token: String
	// The type of access token. It will always be bearer.
	let token_type: String
}

fileprivate struct ErrorResponse: Codable {
	let error: String
}

fileprivate func getSecret(code: String) -> String {
	let iat = Date().timeIntervalSince1970
//	var payload: [String:Any] = [
//		"iss": settings.SOCIAL_AUTH_APPLE_TEAM_ID,
//		"iat": iat,
//		"exp": iat + Calendar.currentCalendar()
//						.dateByAddingUnit(
//							.CalendarUnitDay,
//							value: 180,
//							toDate: iat,
//							options: []),
//		"aud": "https://appleid.apple.com",
//		"sub": settings.CLIENT_ID
//	]
	return ""
}

/*
client_id string (Required) (Authorization and Validation) The application identifier for your app.
client_secret string (Required) (Authorization and Validation) A secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
code string (Authorization) The authorization code received from your application’s user agent. The code is single use only and valid for five minutes.
grant_type string (Required) (Authorization and Validation) The grant type that determines how the client interacts with the server. For authorization code validation, use authorization_code. For refresh token validation requests, use refresh_token.
refresh_token string (Validation) The refresh token received during the authorization request.
redirect_uri string (Authorization) The destination URI the code was originally sent to.
*/
func getSignInWithAppleInfo(_ accessToken: String) -> SignInWithAppleInfo? {
	let url = "https://appleid.apple.com/auth/token"
	let request = CURLRequest(url)//, .addHeader(.authorization, "Bearer \(accessToken)"))
	return try? request.perform().bodyJSON(SignInWithAppleInfo.self)
}
